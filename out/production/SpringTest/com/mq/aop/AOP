**AOP**

**实现方式**

* 基于JDK动态代理（一定要有接口）

    ```
    public static UserService createUserService()
        {
            //目标类
            final UserService userService=new UserServiceImpl();
            //切面类
            final MyAspect myAspect=new MyAspect();
            //代理类：将目标类和切面类结合
            /**
             * Proxy.newProxyInstance(ClassLoader,Interfaces,InvocationHandler);
             * 参数1：类加载器，当前类 .class.getClassLoader();目标类 .getClass().getClassLoader()
             * 参数2：interfaces 代理类需要的所有接口
             *        方法一：目标类实例 .getClass().getInterfaces();        只能获得自己接口，不能获得父类接口
             *        方法二：new Class[]{UserService.class}
             * 参数3：InvocationHandler 处理类，接口
             */
            UserService proxyService=(UserService) Proxy.newProxyInstance(userService.getClass().getClassLoader(),
                    userService.getClass().getInterfaces(),
                    new InvocationHandler() {
                        @Override
                        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                            myAspect.before();
                            //执行目标类的方法
                            Object obj=method.invoke(userService,args);
                            myAspect.after();
                            return obj;
                        }
                    });
    ```
    
* 基于cglib实现（通过创建目标类的子类实现）

    ```
    public static UserServiceImpl createUserService()
        {
            //目标类
            final UserServiceImpl userService=new UserServiceImpl();
            //切面类
            final MyAspect myAspect=new MyAspect();
    
            //代理类
            //核心类
            Enhancer enhancer=new Enhancer();
            //确认父类
            enhancer.setSuperclass(userService.getClass());
            //设置回调函数,MethodInterceptor接口等效于InvocationHandler
            /**
             * param1,2,3和invoke函数一样
             * param4是代理类的方法
             */
            enhancer.setCallback(new MethodInterceptor() {
                @Override
                public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {
                    myAspect.before();
                    Object obj=method.invoke(userService,objects);
                    //代理类的父类即目标类，所以和上面语句是一致的
                    methodProxy.invokeSuper(o,objects);
                    myAspect.after();
                    return obj;
                }
            });
            //创建代理
            UserServiceImpl proxyService=(UserServiceImpl)enhancer.create();
            return proxyService;
        }
    ```